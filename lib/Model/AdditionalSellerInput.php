<?php
/**
 * AdditionalSellerInput
 *
 * PHP version 5
 *
 * @category Class
 * @package  B1\AmazonSPAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace B1\AmazonSPAPI\Model;

use \ArrayAccess;
use \B1\AmazonSPAPI\ObjectSerializer;

/**
 * AdditionalSellerInput Class Doc Comment
 *
 * @category Class
 * @description Additional information required to purchase shipping.
 * @package  B1\AmazonSPAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdditionalSellerInput  extends BaseModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdditionalSellerInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dataType' => 'string',
        'valueAsString' => 'string',
        'valueAsBoolean' => 'bool',
        'valueAsInteger' => 'int',
        'valueAsTimestamp' => '\B1\AmazonSPAPI\Model\Timestamp',
        'valueAsAddress' => '\B1\AmazonSPAPI\Model\Address',
        'valueAsWeight' => '\B1\AmazonSPAPI\Model\Weight',
        'valueAsDimension' => '\B1\AmazonSPAPI\Model\Length',
        'valueAsCurrency' => '\B1\AmazonSPAPI\Model\CurrencyAmount'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dataType' => null,
        'valueAsString' => null,
        'valueAsBoolean' => null,
        'valueAsInteger' => null,
        'valueAsTimestamp' => null,
        'valueAsAddress' => null,
        'valueAsWeight' => null,
        'valueAsDimension' => null,
        'valueAsCurrency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dataType' => 'DataType',
        'valueAsString' => 'ValueAsString',
        'valueAsBoolean' => 'ValueAsBoolean',
        'valueAsInteger' => 'ValueAsInteger',
        'valueAsTimestamp' => 'ValueAsTimestamp',
        'valueAsAddress' => 'ValueAsAddress',
        'valueAsWeight' => 'ValueAsWeight',
        'valueAsDimension' => 'ValueAsDimension',
        'valueAsCurrency' => 'ValueAsCurrency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dataType' => 'setDataType',
        'valueAsString' => 'setValueAsString',
        'valueAsBoolean' => 'setValueAsBoolean',
        'valueAsInteger' => 'setValueAsInteger',
        'valueAsTimestamp' => 'setValueAsTimestamp',
        'valueAsAddress' => 'setValueAsAddress',
        'valueAsWeight' => 'setValueAsWeight',
        'valueAsDimension' => 'setValueAsDimension',
        'valueAsCurrency' => 'setValueAsCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dataType' => 'getDataType',
        'valueAsString' => 'getValueAsString',
        'valueAsBoolean' => 'getValueAsBoolean',
        'valueAsInteger' => 'getValueAsInteger',
        'valueAsTimestamp' => 'getValueAsTimestamp',
        'valueAsAddress' => 'getValueAsAddress',
        'valueAsWeight' => 'getValueAsWeight',
        'valueAsDimension' => 'getValueAsDimension',
        'valueAsCurrency' => 'getValueAsCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dataType'] = isset($data['dataType']) ? $data['dataType'] : null;
        $this->container['valueAsString'] = isset($data['valueAsString']) ? $data['valueAsString'] : null;
        $this->container['valueAsBoolean'] = isset($data['valueAsBoolean']) ? $data['valueAsBoolean'] : null;
        $this->container['valueAsInteger'] = isset($data['valueAsInteger']) ? $data['valueAsInteger'] : null;
        $this->container['valueAsTimestamp'] = isset($data['valueAsTimestamp']) ? $data['valueAsTimestamp'] : null;
        $this->container['valueAsAddress'] = isset($data['valueAsAddress']) ? $data['valueAsAddress'] : null;
        $this->container['valueAsWeight'] = isset($data['valueAsWeight']) ? $data['valueAsWeight'] : null;
        $this->container['valueAsDimension'] = isset($data['valueAsDimension']) ? $data['valueAsDimension'] : null;
        $this->container['valueAsCurrency'] = isset($data['valueAsCurrency']) ? $data['valueAsCurrency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dataType
     *
     * @return string
     */
    public function getDataType()
    {
        return $this->container['dataType'];
    }

    /**
     * Sets dataType
     *
     * @param string $dataType The data type of the additional information.
     *
     * @return $this
     */
    public function setDataType($dataType)
    {
        $this->container['dataType'] = $dataType;

        return $this;
    }

    /**
     * Gets valueAsString
     *
     * @return string
     */
    public function getValueAsString()
    {
        return $this->container['valueAsString'];
    }

    /**
     * Sets valueAsString
     *
     * @param string $valueAsString The value when the data type is string.
     *
     * @return $this
     */
    public function setValueAsString($valueAsString)
    {
        $this->container['valueAsString'] = $valueAsString;

        return $this;
    }

    /**
     * Gets valueAsBoolean
     *
     * @return bool
     */
    public function getValueAsBoolean()
    {
        return $this->container['valueAsBoolean'];
    }

    /**
     * Sets valueAsBoolean
     *
     * @param bool $valueAsBoolean The value when the data type is boolean.
     *
     * @return $this
     */
    public function setValueAsBoolean($valueAsBoolean)
    {
        $this->container['valueAsBoolean'] = $valueAsBoolean;

        return $this;
    }

    /**
     * Gets valueAsInteger
     *
     * @return int
     */
    public function getValueAsInteger()
    {
        return $this->container['valueAsInteger'];
    }

    /**
     * Sets valueAsInteger
     *
     * @param int $valueAsInteger The value when the data type is integer.
     *
     * @return $this
     */
    public function setValueAsInteger($valueAsInteger)
    {
        $this->container['valueAsInteger'] = $valueAsInteger;

        return $this;
    }

    /**
     * Gets valueAsTimestamp
     *
     * @return \B1\AmazonSPAPI\Model\Timestamp
     */
    public function getValueAsTimestamp()
    {
        return $this->container['valueAsTimestamp'];
    }

    /**
     * Sets valueAsTimestamp
     *
     * @param \B1\AmazonSPAPI\Model\Timestamp $valueAsTimestamp The value when the data type is a date-time formatted string.
     *
     * @return $this
     */
    public function setValueAsTimestamp($valueAsTimestamp)
    {
        $this->container['valueAsTimestamp'] = $valueAsTimestamp;

        return $this;
    }

    /**
     * Gets valueAsAddress
     *
     * @return \B1\AmazonSPAPI\Model\Address
     */
    public function getValueAsAddress()
    {
        return $this->container['valueAsAddress'];
    }

    /**
     * Sets valueAsAddress
     *
     * @param \B1\AmazonSPAPI\Model\Address $valueAsAddress valueAsAddress
     *
     * @return $this
     */
    public function setValueAsAddress($valueAsAddress)
    {
        $this->container['valueAsAddress'] = $valueAsAddress;

        return $this;
    }

    /**
     * Gets valueAsWeight
     *
     * @return \B1\AmazonSPAPI\Model\Weight
     */
    public function getValueAsWeight()
    {
        return $this->container['valueAsWeight'];
    }

    /**
     * Sets valueAsWeight
     *
     * @param \B1\AmazonSPAPI\Model\Weight $valueAsWeight valueAsWeight
     *
     * @return $this
     */
    public function setValueAsWeight($valueAsWeight)
    {
        $this->container['valueAsWeight'] = $valueAsWeight;

        return $this;
    }

    /**
     * Gets valueAsDimension
     *
     * @return \B1\AmazonSPAPI\Model\Length
     */
    public function getValueAsDimension()
    {
        return $this->container['valueAsDimension'];
    }

    /**
     * Sets valueAsDimension
     *
     * @param \B1\AmazonSPAPI\Model\Length $valueAsDimension valueAsDimension
     *
     * @return $this
     */
    public function setValueAsDimension($valueAsDimension)
    {
        $this->container['valueAsDimension'] = $valueAsDimension;

        return $this;
    }

    /**
     * Gets valueAsCurrency
     *
     * @return \B1\AmazonSPAPI\Model\CurrencyAmount
     */
    public function getValueAsCurrency()
    {
        return $this->container['valueAsCurrency'];
    }

    /**
     * Sets valueAsCurrency
     *
     * @param \B1\AmazonSPAPI\Model\CurrencyAmount $valueAsCurrency valueAsCurrency
     *
     * @return $this
     */
    public function setValueAsCurrency($valueAsCurrency)
    {
        $this->container['valueAsCurrency'] = $valueAsCurrency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


