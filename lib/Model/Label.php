<?php
/**
 * Label
 *
 * PHP version 5
 *
 * @category Class
 * @package  B1\AmazonSPAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace B1\AmazonSPAPI\Model;

use \ArrayAccess;
use \B1\AmazonSPAPI\ObjectSerializer;

/**
 * Label Class Doc Comment
 *
 * @category Class
 * @description Data for creating a shipping label and dimensions for printing the label.
 * @package  B1\AmazonSPAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Label  extends BaseModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Label';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customTextForLabel' => '\B1\AmazonSPAPI\Model\CustomTextForLabel',
        'dimensions' => '\B1\AmazonSPAPI\Model\LabelDimensions',
        'fileContents' => '\B1\AmazonSPAPI\Model\FileContents',
        'labelFormat' => '\B1\AmazonSPAPI\Model\LabelFormat',
        'standardIdForLabel' => '\B1\AmazonSPAPI\Model\StandardIdForLabel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customTextForLabel' => null,
        'dimensions' => null,
        'fileContents' => null,
        'labelFormat' => null,
        'standardIdForLabel' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customTextForLabel' => 'CustomTextForLabel',
        'dimensions' => 'Dimensions',
        'fileContents' => 'FileContents',
        'labelFormat' => 'LabelFormat',
        'standardIdForLabel' => 'StandardIdForLabel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customTextForLabel' => 'setCustomTextForLabel',
        'dimensions' => 'setDimensions',
        'fileContents' => 'setFileContents',
        'labelFormat' => 'setLabelFormat',
        'standardIdForLabel' => 'setStandardIdForLabel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customTextForLabel' => 'getCustomTextForLabel',
        'dimensions' => 'getDimensions',
        'fileContents' => 'getFileContents',
        'labelFormat' => 'getLabelFormat',
        'standardIdForLabel' => 'getStandardIdForLabel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customTextForLabel'] = isset($data['customTextForLabel']) ? $data['customTextForLabel'] : null;
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['fileContents'] = isset($data['fileContents']) ? $data['fileContents'] : null;
        $this->container['labelFormat'] = isset($data['labelFormat']) ? $data['labelFormat'] : null;
        $this->container['standardIdForLabel'] = isset($data['standardIdForLabel']) ? $data['standardIdForLabel'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['dimensions'] === null) {
            $invalidProperties[] = "'dimensions' can't be null";
        }
        if ($this->container['fileContents'] === null) {
            $invalidProperties[] = "'fileContents' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customTextForLabel
     *
     * @return \B1\AmazonSPAPI\Model\CustomTextForLabel
     */
    public function getCustomTextForLabel()
    {
        return $this->container['customTextForLabel'];
    }

    /**
     * Sets customTextForLabel
     *
     * @param \B1\AmazonSPAPI\Model\CustomTextForLabel $customTextForLabel customTextForLabel
     *
     * @return $this
     */
    public function setCustomTextForLabel($customTextForLabel)
    {
        $this->container['customTextForLabel'] = $customTextForLabel;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \B1\AmazonSPAPI\Model\LabelDimensions
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \B1\AmazonSPAPI\Model\LabelDimensions $dimensions dimensions
     *
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets fileContents
     *
     * @return \B1\AmazonSPAPI\Model\FileContents
     */
    public function getFileContents()
    {
        return $this->container['fileContents'];
    }

    /**
     * Sets fileContents
     *
     * @param \B1\AmazonSPAPI\Model\FileContents $fileContents fileContents
     *
     * @return $this
     */
    public function setFileContents($fileContents)
    {
        $this->container['fileContents'] = $fileContents;

        return $this;
    }

    /**
     * Gets labelFormat
     *
     * @return \B1\AmazonSPAPI\Model\LabelFormat
     */
    public function getLabelFormat()
    {
        return $this->container['labelFormat'];
    }

    /**
     * Sets labelFormat
     *
     * @param \B1\AmazonSPAPI\Model\LabelFormat $labelFormat labelFormat
     *
     * @return $this
     */
    public function setLabelFormat($labelFormat)
    {
        $this->container['labelFormat'] = $labelFormat;

        return $this;
    }

    /**
     * Gets standardIdForLabel
     *
     * @return \B1\AmazonSPAPI\Model\StandardIdForLabel
     */
    public function getStandardIdForLabel()
    {
        return $this->container['standardIdForLabel'];
    }

    /**
     * Sets standardIdForLabel
     *
     * @param \B1\AmazonSPAPI\Model\StandardIdForLabel $standardIdForLabel standardIdForLabel
     *
     * @return $this
     */
    public function setStandardIdForLabel($standardIdForLabel)
    {
        $this->container['standardIdForLabel'] = $standardIdForLabel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


