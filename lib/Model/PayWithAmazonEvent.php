<?php
/**
 * PayWithAmazonEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  B1\AmazonSPAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace B1\AmazonSPAPI\Model;

use \ArrayAccess;
use \B1\AmazonSPAPI\ObjectSerializer;

/**
 * PayWithAmazonEvent Class Doc Comment
 *
 * @category Class
 * @description An event related to the seller&#39;s Pay with Amazon account.
 * @package  B1\AmazonSPAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayWithAmazonEvent  extends BaseModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PayWithAmazonEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sellerOrderId' => 'string',
        'transactionPostedDate' => 'string',
        'businessObjectType' => 'string',
        'salesChannel' => 'string',
        'charge' => '\B1\AmazonSPAPI\Model\ChargeComponent',
        'feeList' => '\B1\AmazonSPAPI\Model\FeeComponentList',
        'paymentAmountType' => 'string',
        'amountDescription' => 'string',
        'fulfillmentChannel' => 'string',
        'storeName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sellerOrderId' => null,
        'transactionPostedDate' => null,
        'businessObjectType' => null,
        'salesChannel' => null,
        'charge' => null,
        'feeList' => null,
        'paymentAmountType' => null,
        'amountDescription' => null,
        'fulfillmentChannel' => null,
        'storeName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sellerOrderId' => 'SellerOrderId',
        'transactionPostedDate' => 'TransactionPostedDate',
        'businessObjectType' => 'BusinessObjectType',
        'salesChannel' => 'SalesChannel',
        'charge' => 'Charge',
        'feeList' => 'FeeList',
        'paymentAmountType' => 'PaymentAmountType',
        'amountDescription' => 'AmountDescription',
        'fulfillmentChannel' => 'FulfillmentChannel',
        'storeName' => 'StoreName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sellerOrderId' => 'setSellerOrderId',
        'transactionPostedDate' => 'setTransactionPostedDate',
        'businessObjectType' => 'setBusinessObjectType',
        'salesChannel' => 'setSalesChannel',
        'charge' => 'setCharge',
        'feeList' => 'setFeeList',
        'paymentAmountType' => 'setPaymentAmountType',
        'amountDescription' => 'setAmountDescription',
        'fulfillmentChannel' => 'setFulfillmentChannel',
        'storeName' => 'setStoreName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sellerOrderId' => 'getSellerOrderId',
        'transactionPostedDate' => 'getTransactionPostedDate',
        'businessObjectType' => 'getBusinessObjectType',
        'salesChannel' => 'getSalesChannel',
        'charge' => 'getCharge',
        'feeList' => 'getFeeList',
        'paymentAmountType' => 'getPaymentAmountType',
        'amountDescription' => 'getAmountDescription',
        'fulfillmentChannel' => 'getFulfillmentChannel',
        'storeName' => 'getStoreName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sellerOrderId'] = isset($data['sellerOrderId']) ? $data['sellerOrderId'] : null;
        $this->container['transactionPostedDate'] = isset($data['transactionPostedDate']) ? $data['transactionPostedDate'] : null;
        $this->container['businessObjectType'] = isset($data['businessObjectType']) ? $data['businessObjectType'] : null;
        $this->container['salesChannel'] = isset($data['salesChannel']) ? $data['salesChannel'] : null;
        $this->container['charge'] = isset($data['charge']) ? $data['charge'] : null;
        $this->container['feeList'] = isset($data['feeList']) ? $data['feeList'] : null;
        $this->container['paymentAmountType'] = isset($data['paymentAmountType']) ? $data['paymentAmountType'] : null;
        $this->container['amountDescription'] = isset($data['amountDescription']) ? $data['amountDescription'] : null;
        $this->container['fulfillmentChannel'] = isset($data['fulfillmentChannel']) ? $data['fulfillmentChannel'] : null;
        $this->container['storeName'] = isset($data['storeName']) ? $data['storeName'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sellerOrderId
     *
     * @return string
     */
    public function getSellerOrderId()
    {
        return $this->container['sellerOrderId'];
    }

    /**
     * Sets sellerOrderId
     *
     * @param string $sellerOrderId An order identifier that is specified by the seller.
     *
     * @return $this
     */
    public function setSellerOrderId($sellerOrderId)
    {
        $this->container['sellerOrderId'] = $sellerOrderId;

        return $this;
    }

    /**
     * Gets transactionPostedDate
     *
     * @return \B1\AmazonSPAPI\Model\\DateTime
     */
    public function getTransactionPostedDate()
    {
        return $this->container['transactionPostedDate'];
    }

    /**
     * Sets transactionPostedDate
     *
     * @param \B1\AmazonSPAPI\Model\\DateTime $transactionPostedDate The date and time when the payment transaction is posted. In ISO 8601 date time format.
     *
     * @return $this
     */
    public function setTransactionPostedDate($transactionPostedDate)
    {
        $this->container['transactionPostedDate'] = $transactionPostedDate;

        return $this;
    }

    /**
     * Gets businessObjectType
     *
     * @return string
     */
    public function getBusinessObjectType()
    {
        return $this->container['businessObjectType'];
    }

    /**
     * Sets businessObjectType
     *
     * @param string $businessObjectType The type of business object.
     *
     * @return $this
     */
    public function setBusinessObjectType($businessObjectType)
    {
        $this->container['businessObjectType'] = $businessObjectType;

        return $this;
    }

    /**
     * Gets salesChannel
     *
     * @return string
     */
    public function getSalesChannel()
    {
        return $this->container['salesChannel'];
    }

    /**
     * Sets salesChannel
     *
     * @param string $salesChannel The sales channel for the transaction.
     *
     * @return $this
     */
    public function setSalesChannel($salesChannel)
    {
        $this->container['salesChannel'] = $salesChannel;

        return $this;
    }

    /**
     * Gets charge
     *
     * @return \B1\AmazonSPAPI\Model\ChargeComponent
     */
    public function getCharge()
    {
        return $this->container['charge'];
    }

    /**
     * Sets charge
     *
     * @param \B1\AmazonSPAPI\Model\ChargeComponent $charge The charge associated with the event.
     *
     * @return $this
     */
    public function setCharge($charge)
    {
        $this->container['charge'] = $charge;

        return $this;
    }

    /**
     * Gets feeList
     *
     * @return \B1\AmazonSPAPI\Model\FeeComponentList
     */
    public function getFeeList()
    {
        return $this->container['feeList'];
    }

    /**
     * Sets feeList
     *
     * @param \B1\AmazonSPAPI\Model\FeeComponentList $feeList A list of fees associated with the event.
     *
     * @return $this
     */
    public function setFeeList($feeList)
    {
        $this->container['feeList'] = $feeList;

        return $this;
    }

    /**
     * Gets paymentAmountType
     *
     * @return string
     */
    public function getPaymentAmountType()
    {
        return $this->container['paymentAmountType'];
    }

    /**
     * Sets paymentAmountType
     *
     * @param string $paymentAmountType The type of payment.  Possible values:  * Sales
     *
     * @return $this
     */
    public function setPaymentAmountType($paymentAmountType)
    {
        $this->container['paymentAmountType'] = $paymentAmountType;

        return $this;
    }

    /**
     * Gets amountDescription
     *
     * @return string
     */
    public function getAmountDescription()
    {
        return $this->container['amountDescription'];
    }

    /**
     * Sets amountDescription
     *
     * @param string $amountDescription A short description of this payment event.
     *
     * @return $this
     */
    public function setAmountDescription($amountDescription)
    {
        $this->container['amountDescription'] = $amountDescription;

        return $this;
    }

    /**
     * Gets fulfillmentChannel
     *
     * @return string
     */
    public function getFulfillmentChannel()
    {
        return $this->container['fulfillmentChannel'];
    }

    /**
     * Sets fulfillmentChannel
     *
     * @param string $fulfillmentChannel The fulfillment channel.  Possible values:  * AFN - Amazon Fulfillment Network (Fulfillment by Amazon)  * MFN - Merchant Fulfillment Network (self-fulfilled)
     *
     * @return $this
     */
    public function setFulfillmentChannel($fulfillmentChannel)
    {
        $this->container['fulfillmentChannel'] = $fulfillmentChannel;

        return $this;
    }

    /**
     * Gets storeName
     *
     * @return string
     */
    public function getStoreName()
    {
        return $this->container['storeName'];
    }

    /**
     * Sets storeName
     *
     * @param string $storeName The store name where the event occurred.
     *
     * @return $this
     */
    public function setStoreName($storeName)
    {
        $this->container['storeName'] = $storeName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


