<?php
/**
 * ShippingServiceOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  B1\AmazonSPAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace B1\AmazonSPAPI\Model;

use \ArrayAccess;
use \B1\AmazonSPAPI\ObjectSerializer;

/**
 * ShippingServiceOptions Class Doc Comment
 *
 * @category Class
 * @description Extra services provided by a carrier.
 * @package  B1\AmazonSPAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShippingServiceOptions  extends BaseModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShippingServiceOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'deliveryExperience' => '\B1\AmazonSPAPI\Model\DeliveryExperienceType',
        'declaredValue' => '\B1\AmazonSPAPI\Model\CurrencyAmount',
        'carrierWillPickUp' => 'bool',
        'carrierWillPickUpOption' => '\B1\AmazonSPAPI\Model\CarrierWillPickUpOption',
        'labelFormat' => '\B1\AmazonSPAPI\Model\LabelFormat'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'deliveryExperience' => null,
        'declaredValue' => null,
        'carrierWillPickUp' => null,
        'carrierWillPickUpOption' => null,
        'labelFormat' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deliveryExperience' => 'DeliveryExperience',
        'declaredValue' => 'DeclaredValue',
        'carrierWillPickUp' => 'CarrierWillPickUp',
        'carrierWillPickUpOption' => 'CarrierWillPickUpOption',
        'labelFormat' => 'LabelFormat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deliveryExperience' => 'setDeliveryExperience',
        'declaredValue' => 'setDeclaredValue',
        'carrierWillPickUp' => 'setCarrierWillPickUp',
        'carrierWillPickUpOption' => 'setCarrierWillPickUpOption',
        'labelFormat' => 'setLabelFormat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deliveryExperience' => 'getDeliveryExperience',
        'declaredValue' => 'getDeclaredValue',
        'carrierWillPickUp' => 'getCarrierWillPickUp',
        'carrierWillPickUpOption' => 'getCarrierWillPickUpOption',
        'labelFormat' => 'getLabelFormat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deliveryExperience'] = isset($data['deliveryExperience']) ? $data['deliveryExperience'] : null;
        $this->container['declaredValue'] = isset($data['declaredValue']) ? $data['declaredValue'] : null;
        $this->container['carrierWillPickUp'] = isset($data['carrierWillPickUp']) ? $data['carrierWillPickUp'] : null;
        $this->container['carrierWillPickUpOption'] = isset($data['carrierWillPickUpOption']) ? $data['carrierWillPickUpOption'] : null;
        $this->container['labelFormat'] = isset($data['labelFormat']) ? $data['labelFormat'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['deliveryExperience'] === null) {
            $invalidProperties[] = "'deliveryExperience' can't be null";
        }
        if ($this->container['carrierWillPickUp'] === null) {
            $invalidProperties[] = "'carrierWillPickUp' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deliveryExperience
     *
     * @return \B1\AmazonSPAPI\Model\DeliveryExperienceType
     */
    public function getDeliveryExperience()
    {
        return $this->container['deliveryExperience'];
    }

    /**
     * Sets deliveryExperience
     *
     * @param \B1\AmazonSPAPI\Model\DeliveryExperienceType $deliveryExperience The delivery confirmation level.
     *
     * @return $this
     */
    public function setDeliveryExperience($deliveryExperience)
    {
        $this->container['deliveryExperience'] = $deliveryExperience;

        return $this;
    }

    /**
     * Gets declaredValue
     *
     * @return \B1\AmazonSPAPI\Model\CurrencyAmount
     */
    public function getDeclaredValue()
    {
        return $this->container['declaredValue'];
    }

    /**
     * Sets declaredValue
     *
     * @param \B1\AmazonSPAPI\Model\CurrencyAmount $declaredValue The declared value of the shipment. The carrier uses this value to determine the amount to use to insure the shipment. If DeclaredValue is greater than the carrier's minimum insurance amount, the seller is charged for the additional insurance as determined by the carrier. For information about optional insurance coverage, see the Seller Central Help [UK](https://sellercentral.amazon.co.uk/gp/help/200204080) [US](https://sellercentral.amazon.com/gp/help/200204080).
     *
     * @return $this
     */
    public function setDeclaredValue($declaredValue)
    {
        $this->container['declaredValue'] = $declaredValue;

        return $this;
    }

    /**
     * Gets carrierWillPickUp
     *
     * @return bool
     */
    public function getCarrierWillPickUp()
    {
        return $this->container['carrierWillPickUp'];
    }

    /**
     * Sets carrierWillPickUp
     *
     * @param bool $carrierWillPickUp When true, the carrier will pick up the package.  Note: Scheduled carrier pickup is available only using Dynamex (US), DPD (UK), and Royal Mail (UK).
     *
     * @return $this
     */
    public function setCarrierWillPickUp($carrierWillPickUp)
    {
        $this->container['carrierWillPickUp'] = $carrierWillPickUp;

        return $this;
    }

    /**
     * Gets carrierWillPickUpOption
     *
     * @return \B1\AmazonSPAPI\Model\CarrierWillPickUpOption
     */
    public function getCarrierWillPickUpOption()
    {
        return $this->container['carrierWillPickUpOption'];
    }

    /**
     * Sets carrierWillPickUpOption
     *
     * @param \B1\AmazonSPAPI\Model\CarrierWillPickUpOption $carrierWillPickUpOption carrierWillPickUpOption
     *
     * @return $this
     */
    public function setCarrierWillPickUpOption($carrierWillPickUpOption)
    {
        $this->container['carrierWillPickUpOption'] = $carrierWillPickUpOption;

        return $this;
    }

    /**
     * Gets labelFormat
     *
     * @return \B1\AmazonSPAPI\Model\LabelFormat
     */
    public function getLabelFormat()
    {
        return $this->container['labelFormat'];
    }

    /**
     * Sets labelFormat
     *
     * @param \B1\AmazonSPAPI\Model\LabelFormat $labelFormat The seller's preferred label format.
     *
     * @return $this
     */
    public function setLabelFormat($labelFormat)
    {
        $this->container['labelFormat'] = $labelFormat;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


