<?php
/**
 * AuthorizationApi
 * PHP version 5
 *
 * @category Class
 * @package  B1\AmazonSPAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Authorization
 *
 * The Selling Partner API for Authorization helps developers manage authorizations and check the specific permissions associated with a given authorization.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace B1\AmazonSPAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use B1\AmazonSPAPI\ApiException;
use B1\AmazonSPAPI\Configuration;
use B1\AmazonSPAPI\HeaderSelector;
use B1\AmazonSPAPI\ObjectSerializer;
use B1\AmazonSPAPI\Helpers\SellingPartnerApiRequest;
use B1\AmazonSPAPI\Model\GetAuthorizationCodeResponse;
/**
 * AuthorizationApi Class Doc Comment
 *
 * @category Class
 * @package  B1\AmazonSPAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuthorizationApi
{
    use SellingPartnerApiRequest;
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param Configuration   $config
     */
    public function __construct(
        Configuration $config = null
    ) {
        $this->client =  new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAuthorizationCode
     *
     * Returns the Login with Amazon (LWA) authorization code for an existing Amazon MWS authorization.
     *
     * @param  string $sellingPartnerId The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore. (required)
     * @param  string $developerId Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central. (required)
     * @param  string $mwsAuthToken The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore. (required)
     *
     * @throws \B1\AmazonSPAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \B1\AmazonSPAPI\Model\GetAuthorizationCodeResponse
     */
    public function getAuthorizationCode($sellingPartnerId, $developerId, $mwsAuthToken)
    {
        list($response) = $this->getAuthorizationCodeWithHttpInfo($sellingPartnerId, $developerId, $mwsAuthToken);
        return $response;
    }

    /**
     * Operation getAuthorizationCodeWithHttpInfo
     *
     * Returns the Login with Amazon (LWA) authorization code for an existing Amazon MWS authorization.
     *
     * @param  string $sellingPartnerId The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore. (required)
     * @param  string $developerId Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central. (required)
     * @param  string $mwsAuthToken The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore. (required)
     *
     * @throws \B1\AmazonSPAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \B1\AmazonSPAPI\Model\GetAuthorizationCodeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAuthorizationCodeWithHttpInfo($sellingPartnerId, $developerId, $mwsAuthToken)
    {
        $returnType = '\B1\AmazonSPAPI\Model\GetAuthorizationCodeResponse';
        $request = $this->getAuthorizationCodeRequest($sellingPartnerId, $developerId, $mwsAuthToken);
        return $this->sendRequest($request, GetAuthorizationCodeResponse::class);

    }

    /**
     * Operation getAuthorizationCodeAsync
     *
     * Returns the Login with Amazon (LWA) authorization code for an existing Amazon MWS authorization.
     *
     * @param  string $sellingPartnerId The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore. (required)
     * @param  string $developerId Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central. (required)
     * @param  string $mwsAuthToken The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAuthorizationCodeAsync($sellingPartnerId, $developerId, $mwsAuthToken)
    {
        return $this->getAuthorizationCodeAsyncWithHttpInfo($sellingPartnerId, $developerId, $mwsAuthToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAuthorizationCodeAsyncWithHttpInfo
     *
     * Returns the Login with Amazon (LWA) authorization code for an existing Amazon MWS authorization.
     *
     * @param  string $sellingPartnerId The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore. (required)
     * @param  string $developerId Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central. (required)
     * @param  string $mwsAuthToken The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAuthorizationCodeAsyncWithHttpInfo($sellingPartnerId, $developerId, $mwsAuthToken)
    {
        $returnType = '\B1\AmazonSPAPI\Model\GetAuthorizationCodeResponse';
        $request = $this->getAuthorizationCodeRequest($sellingPartnerId, $developerId, $mwsAuthToken);
        return $this->sendRequestAsync($request, GetAuthorizationCodeResponse::class);
    }

    /**
     * Create request for operation 'getAuthorizationCode'
     *
     * @param  string $sellingPartnerId The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore. (required)
     * @param  string $developerId Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central. (required)
     * @param  string $mwsAuthToken The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAuthorizationCodeRequest($sellingPartnerId, $developerId, $mwsAuthToken)
    {
        // verify the required parameter 'sellingPartnerId' is set
        if ($sellingPartnerId === null || (is_array($sellingPartnerId) && count($sellingPartnerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sellingPartnerId when calling getAuthorizationCode'
            );
        }
        // verify the required parameter 'developerId' is set
        if ($developerId === null || (is_array($developerId) && count($developerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $developerId when calling getAuthorizationCode'
            );
        }
        // verify the required parameter 'mwsAuthToken' is set
        if ($mwsAuthToken === null || (is_array($mwsAuthToken) && count($mwsAuthToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mwsAuthToken when calling getAuthorizationCode'
            );
        }

        $resourcePath = '/authorization/v1/authorizationCode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sellingPartnerId !== null) {
            $queryParams['sellingPartnerId'] = ObjectSerializer::toQueryValue($sellingPartnerId);
        }
        // query params
        if ($developerId !== null) {
            $queryParams['developerId'] = ObjectSerializer::toQueryValue($developerId);
        }
        // query params
        if ($mwsAuthToken !== null) {
            $queryParams['mwsAuthToken'] = ObjectSerializer::toQueryValue($mwsAuthToken);
        }
        //custom headers
        if($this->config->getHeaders()){
            $headerParams = $this->config->getHeaders();
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
