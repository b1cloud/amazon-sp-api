<?php
/**
 * SolutionProviderCreditEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  B1\AmazonSPAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace B1\AmazonSPAPI\Model;

use \ArrayAccess;
use \B1\AmazonSPAPI\ObjectSerializer;

/**
 * SolutionProviderCreditEvent Class Doc Comment
 *
 * @category Class
 * @description A credit given to a solution provider.
 * @package  B1\AmazonSPAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SolutionProviderCreditEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SolutionProviderCreditEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'providerTransactionType' => 'string',
        'sellerOrderId' => 'string',
        'marketplaceId' => 'string',
        'marketplaceCountryCode' => 'string',
        'sellerId' => 'string',
        'sellerStoreName' => 'string',
        'providerId' => 'string',
        'providerStoreName' => 'string',
        'transactionAmount' => '\B1\AmazonSPAPI\Model\Currency',
        'transactionCreationDate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'providerTransactionType' => null,
        'sellerOrderId' => null,
        'marketplaceId' => null,
        'marketplaceCountryCode' => null,
        'sellerId' => null,
        'sellerStoreName' => null,
        'providerId' => null,
        'providerStoreName' => null,
        'transactionAmount' => null,
        'transactionCreationDate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'providerTransactionType' => 'ProviderTransactionType',
        'sellerOrderId' => 'SellerOrderId',
        'marketplaceId' => 'MarketplaceId',
        'marketplaceCountryCode' => 'MarketplaceCountryCode',
        'sellerId' => 'SellerId',
        'sellerStoreName' => 'SellerStoreName',
        'providerId' => 'ProviderId',
        'providerStoreName' => 'ProviderStoreName',
        'transactionAmount' => 'TransactionAmount',
        'transactionCreationDate' => 'TransactionCreationDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'providerTransactionType' => 'setProviderTransactionType',
        'sellerOrderId' => 'setSellerOrderId',
        'marketplaceId' => 'setMarketplaceId',
        'marketplaceCountryCode' => 'setMarketplaceCountryCode',
        'sellerId' => 'setSellerId',
        'sellerStoreName' => 'setSellerStoreName',
        'providerId' => 'setProviderId',
        'providerStoreName' => 'setProviderStoreName',
        'transactionAmount' => 'setTransactionAmount',
        'transactionCreationDate' => 'setTransactionCreationDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'providerTransactionType' => 'getProviderTransactionType',
        'sellerOrderId' => 'getSellerOrderId',
        'marketplaceId' => 'getMarketplaceId',
        'marketplaceCountryCode' => 'getMarketplaceCountryCode',
        'sellerId' => 'getSellerId',
        'sellerStoreName' => 'getSellerStoreName',
        'providerId' => 'getProviderId',
        'providerStoreName' => 'getProviderStoreName',
        'transactionAmount' => 'getTransactionAmount',
        'transactionCreationDate' => 'getTransactionCreationDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['providerTransactionType'] = isset($data['providerTransactionType']) ? $data['providerTransactionType'] : null;
        $this->container['sellerOrderId'] = isset($data['sellerOrderId']) ? $data['sellerOrderId'] : null;
        $this->container['marketplaceId'] = isset($data['marketplaceId']) ? $data['marketplaceId'] : null;
        $this->container['marketplaceCountryCode'] = isset($data['marketplaceCountryCode']) ? $data['marketplaceCountryCode'] : null;
        $this->container['sellerId'] = isset($data['sellerId']) ? $data['sellerId'] : null;
        $this->container['sellerStoreName'] = isset($data['sellerStoreName']) ? $data['sellerStoreName'] : null;
        $this->container['providerId'] = isset($data['providerId']) ? $data['providerId'] : null;
        $this->container['providerStoreName'] = isset($data['providerStoreName']) ? $data['providerStoreName'] : null;
        $this->container['transactionAmount'] = isset($data['transactionAmount']) ? $data['transactionAmount'] : null;
        $this->container['transactionCreationDate'] = isset($data['transactionCreationDate']) ? $data['transactionCreationDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets providerTransactionType
     *
     * @return string
     */
    public function getProviderTransactionType()
    {
        return $this->container['providerTransactionType'];
    }

    /**
     * Sets providerTransactionType
     *
     * @param string $providerTransactionType The transaction type.
     *
     * @return $this
     */
    public function setProviderTransactionType($providerTransactionType)
    {
        $this->container['providerTransactionType'] = $providerTransactionType;

        return $this;
    }

    /**
     * Gets sellerOrderId
     *
     * @return string
     */
    public function getSellerOrderId()
    {
        return $this->container['sellerOrderId'];
    }

    /**
     * Sets sellerOrderId
     *
     * @param string $sellerOrderId A seller-defined identifier for an order.
     *
     * @return $this
     */
    public function setSellerOrderId($sellerOrderId)
    {
        $this->container['sellerOrderId'] = $sellerOrderId;

        return $this;
    }

    /**
     * Gets marketplaceId
     *
     * @return string
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param string $marketplaceId The identifier of the marketplace where the order was placed.
     *
     * @return $this
     */
    public function setMarketplaceId($marketplaceId)
    {
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets marketplaceCountryCode
     *
     * @return string
     */
    public function getMarketplaceCountryCode()
    {
        return $this->container['marketplaceCountryCode'];
    }

    /**
     * Sets marketplaceCountryCode
     *
     * @param string $marketplaceCountryCode The two-letter country code of the country associated with the marketplace where the order was placed.
     *
     * @return $this
     */
    public function setMarketplaceCountryCode($marketplaceCountryCode)
    {
        $this->container['marketplaceCountryCode'] = $marketplaceCountryCode;

        return $this;
    }

    /**
     * Gets sellerId
     *
     * @return string
     */
    public function getSellerId()
    {
        return $this->container['sellerId'];
    }

    /**
     * Sets sellerId
     *
     * @param string $sellerId The Amazon-defined identifier of the seller.
     *
     * @return $this
     */
    public function setSellerId($sellerId)
    {
        $this->container['sellerId'] = $sellerId;

        return $this;
    }

    /**
     * Gets sellerStoreName
     *
     * @return string
     */
    public function getSellerStoreName()
    {
        return $this->container['sellerStoreName'];
    }

    /**
     * Sets sellerStoreName
     *
     * @param string $sellerStoreName The store name where the payment event occurred.
     *
     * @return $this
     */
    public function setSellerStoreName($sellerStoreName)
    {
        $this->container['sellerStoreName'] = $sellerStoreName;

        return $this;
    }

    /**
     * Gets providerId
     *
     * @return string
     */
    public function getProviderId()
    {
        return $this->container['providerId'];
    }

    /**
     * Sets providerId
     *
     * @param string $providerId The Amazon-defined identifier of the solution provider.
     *
     * @return $this
     */
    public function setProviderId($providerId)
    {
        $this->container['providerId'] = $providerId;

        return $this;
    }

    /**
     * Gets providerStoreName
     *
     * @return string
     */
    public function getProviderStoreName()
    {
        return $this->container['providerStoreName'];
    }

    /**
     * Sets providerStoreName
     *
     * @param string $providerStoreName The store name where the payment event occurred.
     *
     * @return $this
     */
    public function setProviderStoreName($providerStoreName)
    {
        $this->container['providerStoreName'] = $providerStoreName;

        return $this;
    }

    /**
     * Gets transactionAmount
     *
     * @return \B1\AmazonSPAPI\Model\Currency
     */
    public function getTransactionAmount()
    {
        return $this->container['transactionAmount'];
    }

    /**
     * Sets transactionAmount
     *
     * @param \B1\AmazonSPAPI\Model\Currency $transactionAmount The amount of the credit.
     *
     * @return $this
     */
    public function setTransactionAmount($transactionAmount)
    {
        $this->container['transactionAmount'] = $transactionAmount;

        return $this;
    }

    /**
     * Gets transactionCreationDate
     *
     * @return \B1\AmazonSPAPI\Model\\DateTime
     */
    public function getTransactionCreationDate()
    {
        return $this->container['transactionCreationDate'];
    }

    /**
     * Sets transactionCreationDate
     *
     * @param \B1\AmazonSPAPI\Model\\DateTime $transactionCreationDate The date and time that the credit transaction was created, in ISO 8601 date time format.
     *
     * @return $this
     */
    public function setTransactionCreationDate($transactionCreationDate)
    {
        $this->container['transactionCreationDate'] = $transactionCreationDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


