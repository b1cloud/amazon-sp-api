<?php
/**
 * OrderItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  B1\AmazonSPAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: v0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace B1\AmazonSPAPI\Model;

use \ArrayAccess;
use \B1\AmazonSPAPI\ObjectSerializer;

/**
 * OrderItem Class Doc Comment
 *
 * @category Class
 * @description A single order item.
 * @package  B1\AmazonSPAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 *
 * @property string $aSIN
 * @property string $sellerSKU
 * @property string $orderItemId
 * @property string $title
 * @property integer $quantityOrdered
 * @property integer $quantityShipped
 * @property ProductInfoDetail $productInfo
 * @property PointsGrantedDetail $pointsGranted
 * @property Money $itemPrice
 * @property Money $shippingPrice
 * @property Money $itemTax
 * @property Money $shippingTax
 * @property Money $shippingDiscount
 * @property Money $shippingDiscountTax
 * @property Money $promotionDiscount
 * @property Money $promotionDiscountTax
 * @property PromotionIdList $promotionIds
 * @property Money $cODFee
 * @property Money $cODFeeDiscount
 * @property boolean $isGift
 * @property string $conditionNote
 * @property string $conditionId
 * @property string $conditionSubtypeId
 * @property string $scheduledDeliveryStartDate
 * @property string $scheduledDeliveryEndDate
 * @property string $priceDesignation
 * @property TaxCollection $taxCollection
 * @property boolean $serialNumberRequired
 * @property boolean $isTransparency
 * @property string $iossNumber
 * @property string $storeChainStoreId
 * @property string $deemedResellerCategory
 * @property ItemBuyerInfo $buyerInfo
 */
class OrderItem  extends BaseModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aSIN' => 'string',
        'sellerSKU' => 'string',
        'orderItemId' => 'string',
        'title' => 'string',
        'quantityOrdered' => 'int',
        'quantityShipped' => 'int',
        'productInfo' => '\B1\AmazonSPAPI\Model\ProductInfoDetail',
        'pointsGranted' => '\B1\AmazonSPAPI\Model\PointsGrantedDetail',
        'itemPrice' => '\B1\AmazonSPAPI\Model\Money',
        'shippingPrice' => '\B1\AmazonSPAPI\Model\Money',
        'itemTax' => '\B1\AmazonSPAPI\Model\Money',
        'shippingTax' => '\B1\AmazonSPAPI\Model\Money',
        'shippingDiscount' => '\B1\AmazonSPAPI\Model\Money',
        'shippingDiscountTax' => '\B1\AmazonSPAPI\Model\Money',
        'promotionDiscount' => '\B1\AmazonSPAPI\Model\Money',
        'promotionDiscountTax' => '\B1\AmazonSPAPI\Model\Money',
        'promotionIds' => '\B1\AmazonSPAPI\Model\PromotionIdList',
        'cODFee' => '\B1\AmazonSPAPI\Model\Money',
        'cODFeeDiscount' => '\B1\AmazonSPAPI\Model\Money',
        'isGift' => 'bool',
        'conditionNote' => 'string',
        'conditionId' => 'string',
        'conditionSubtypeId' => 'string',
        'scheduledDeliveryStartDate' => 'string',
        'scheduledDeliveryEndDate' => 'string',
        'priceDesignation' => 'string',
        'taxCollection' => '\B1\AmazonSPAPI\Model\TaxCollection',
        'serialNumberRequired' => 'bool',
        'isTransparency' => 'bool',
        'iossNumber' => 'string',
        'storeChainStoreId' => 'string',
        'deemedResellerCategory' => 'string',
        'buyerInfo' => '\B1\AmazonSPAPI\Model\ItemBuyerInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aSIN' => null,
        'sellerSKU' => null,
        'orderItemId' => null,
        'title' => null,
        'quantityOrdered' => null,
        'quantityShipped' => null,
        'productInfo' => null,
        'pointsGranted' => null,
        'itemPrice' => null,
        'shippingPrice' => null,
        'itemTax' => null,
        'shippingTax' => null,
        'shippingDiscount' => null,
        'shippingDiscountTax' => null,
        'promotionDiscount' => null,
        'promotionDiscountTax' => null,
        'promotionIds' => null,
        'cODFee' => null,
        'cODFeeDiscount' => null,
        'isGift' => null,
        'conditionNote' => null,
        'conditionId' => null,
        'conditionSubtypeId' => null,
        'scheduledDeliveryStartDate' => null,
        'scheduledDeliveryEndDate' => null,
        'priceDesignation' => null,
        'taxCollection' => null,
        'serialNumberRequired' => null,
        'isTransparency' => null,
        'iossNumber' => null,
        'storeChainStoreId' => null,
        'deemedResellerCategory' => null,
        'buyerInfo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aSIN' => 'ASIN',
        'sellerSKU' => 'SellerSKU',
        'orderItemId' => 'OrderItemId',
        'title' => 'Title',
        'quantityOrdered' => 'QuantityOrdered',
        'quantityShipped' => 'QuantityShipped',
        'productInfo' => 'ProductInfo',
        'pointsGranted' => 'PointsGranted',
        'itemPrice' => 'ItemPrice',
        'shippingPrice' => 'ShippingPrice',
        'itemTax' => 'ItemTax',
        'shippingTax' => 'ShippingTax',
        'shippingDiscount' => 'ShippingDiscount',
        'shippingDiscountTax' => 'ShippingDiscountTax',
        'promotionDiscount' => 'PromotionDiscount',
        'promotionDiscountTax' => 'PromotionDiscountTax',
        'promotionIds' => 'PromotionIds',
        'cODFee' => 'CODFee',
        'cODFeeDiscount' => 'CODFeeDiscount',
        'isGift' => 'IsGift',
        'conditionNote' => 'ConditionNote',
        'conditionId' => 'ConditionId',
        'conditionSubtypeId' => 'ConditionSubtypeId',
        'scheduledDeliveryStartDate' => 'ScheduledDeliveryStartDate',
        'scheduledDeliveryEndDate' => 'ScheduledDeliveryEndDate',
        'priceDesignation' => 'PriceDesignation',
        'taxCollection' => 'TaxCollection',
        'serialNumberRequired' => 'SerialNumberRequired',
        'isTransparency' => 'IsTransparency',
        'iossNumber' => 'IossNumber',
        'storeChainStoreId' => 'StoreChainStoreId',
        'deemedResellerCategory' => 'DeemedResellerCategory',
        'buyerInfo' => 'BuyerInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aSIN' => 'setASIN',
        'sellerSKU' => 'setSellerSKU',
        'orderItemId' => 'setOrderItemId',
        'title' => 'setTitle',
        'quantityOrdered' => 'setQuantityOrdered',
        'quantityShipped' => 'setQuantityShipped',
        'productInfo' => 'setProductInfo',
        'pointsGranted' => 'setPointsGranted',
        'itemPrice' => 'setItemPrice',
        'shippingPrice' => 'setShippingPrice',
        'itemTax' => 'setItemTax',
        'shippingTax' => 'setShippingTax',
        'shippingDiscount' => 'setShippingDiscount',
        'shippingDiscountTax' => 'setShippingDiscountTax',
        'promotionDiscount' => 'setPromotionDiscount',
        'promotionDiscountTax' => 'setPromotionDiscountTax',
        'promotionIds' => 'setPromotionIds',
        'cODFee' => 'setCODFee',
        'cODFeeDiscount' => 'setCODFeeDiscount',
        'isGift' => 'setIsGift',
        'conditionNote' => 'setConditionNote',
        'conditionId' => 'setConditionId',
        'conditionSubtypeId' => 'setConditionSubtypeId',
        'scheduledDeliveryStartDate' => 'setScheduledDeliveryStartDate',
        'scheduledDeliveryEndDate' => 'setScheduledDeliveryEndDate',
        'priceDesignation' => 'setPriceDesignation',
        'taxCollection' => 'setTaxCollection',
        'serialNumberRequired' => 'setSerialNumberRequired',
        'isTransparency' => 'setIsTransparency',
        'iossNumber' => 'setIossNumber',
        'storeChainStoreId' => 'setStoreChainStoreId',
        'deemedResellerCategory' => 'setDeemedResellerCategory',
        'buyerInfo' => 'setBuyerInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aSIN' => 'getASIN',
        'sellerSKU' => 'getSellerSKU',
        'orderItemId' => 'getOrderItemId',
        'title' => 'getTitle',
        'quantityOrdered' => 'getQuantityOrdered',
        'quantityShipped' => 'getQuantityShipped',
        'productInfo' => 'getProductInfo',
        'pointsGranted' => 'getPointsGranted',
        'itemPrice' => 'getItemPrice',
        'shippingPrice' => 'getShippingPrice',
        'itemTax' => 'getItemTax',
        'shippingTax' => 'getShippingTax',
        'shippingDiscount' => 'getShippingDiscount',
        'shippingDiscountTax' => 'getShippingDiscountTax',
        'promotionDiscount' => 'getPromotionDiscount',
        'promotionDiscountTax' => 'getPromotionDiscountTax',
        'promotionIds' => 'getPromotionIds',
        'cODFee' => 'getCODFee',
        'cODFeeDiscount' => 'getCODFeeDiscount',
        'isGift' => 'getIsGift',
        'conditionNote' => 'getConditionNote',
        'conditionId' => 'getConditionId',
        'conditionSubtypeId' => 'getConditionSubtypeId',
        'scheduledDeliveryStartDate' => 'getScheduledDeliveryStartDate',
        'scheduledDeliveryEndDate' => 'getScheduledDeliveryEndDate',
        'priceDesignation' => 'getPriceDesignation',
        'taxCollection' => 'getTaxCollection',
        'serialNumberRequired' => 'getSerialNumberRequired',
        'isTransparency' => 'getIsTransparency',
        'iossNumber' => 'getIossNumber',
        'storeChainStoreId' => 'getStoreChainStoreId',
        'deemedResellerCategory' => 'getDeemedResellerCategory',
        'buyerInfo' => 'getBuyerInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DEEMED_RESELLER_CATEGORY_IOSS = 'IOSS';
    const DEEMED_RESELLER_CATEGORY_UOSS = 'UOSS';



    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeemedResellerCategoryAllowableValues()
    {
        return [
            self::DEEMED_RESELLER_CATEGORY_IOSS,
            self::DEEMED_RESELLER_CATEGORY_UOSS,
        ];
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aSIN'] = isset($data['aSIN']) ? $data['aSIN'] : null;
        $this->container['sellerSKU'] = isset($data['sellerSKU']) ? $data['sellerSKU'] : null;
        $this->container['orderItemId'] = isset($data['orderItemId']) ? $data['orderItemId'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['quantityOrdered'] = isset($data['quantityOrdered']) ? $data['quantityOrdered'] : null;
        $this->container['quantityShipped'] = isset($data['quantityShipped']) ? $data['quantityShipped'] : null;
        $this->container['productInfo'] = isset($data['productInfo']) ? $data['productInfo'] : null;
        $this->container['pointsGranted'] = isset($data['pointsGranted']) ? $data['pointsGranted'] : null;
        $this->container['itemPrice'] = isset($data['itemPrice']) ? $data['itemPrice'] : null;
        $this->container['shippingPrice'] = isset($data['shippingPrice']) ? $data['shippingPrice'] : null;
        $this->container['itemTax'] = isset($data['itemTax']) ? $data['itemTax'] : null;
        $this->container['shippingTax'] = isset($data['shippingTax']) ? $data['shippingTax'] : null;
        $this->container['shippingDiscount'] = isset($data['shippingDiscount']) ? $data['shippingDiscount'] : null;
        $this->container['shippingDiscountTax'] = isset($data['shippingDiscountTax']) ? $data['shippingDiscountTax'] : null;
        $this->container['promotionDiscount'] = isset($data['promotionDiscount']) ? $data['promotionDiscount'] : null;
        $this->container['promotionDiscountTax'] = isset($data['promotionDiscountTax']) ? $data['promotionDiscountTax'] : null;
        $this->container['promotionIds'] = isset($data['promotionIds']) ? $data['promotionIds'] : null;
        $this->container['cODFee'] = isset($data['cODFee']) ? $data['cODFee'] : null;
        $this->container['cODFeeDiscount'] = isset($data['cODFeeDiscount']) ? $data['cODFeeDiscount'] : null;
        $this->container['isGift'] = isset($data['isGift']) ? $data['isGift'] : null;
        $this->container['conditionNote'] = isset($data['conditionNote']) ? $data['conditionNote'] : null;
        $this->container['conditionId'] = isset($data['conditionId']) ? $data['conditionId'] : null;
        $this->container['conditionSubtypeId'] = isset($data['conditionSubtypeId']) ? $data['conditionSubtypeId'] : null;
        $this->container['scheduledDeliveryStartDate'] = isset($data['scheduledDeliveryStartDate']) ? $data['scheduledDeliveryStartDate'] : null;
        $this->container['scheduledDeliveryEndDate'] = isset($data['scheduledDeliveryEndDate']) ? $data['scheduledDeliveryEndDate'] : null;
        $this->container['priceDesignation'] = isset($data['priceDesignation']) ? $data['priceDesignation'] : null;
        $this->container['taxCollection'] = isset($data['taxCollection']) ? $data['taxCollection'] : null;
        $this->container['serialNumberRequired'] = isset($data['serialNumberRequired']) ? $data['serialNumberRequired'] : null;
        $this->container['isTransparency'] = isset($data['isTransparency']) ? $data['isTransparency'] : null;
        $this->container['iossNumber'] = isset($data['iossNumber']) ? $data['iossNumber'] : null;
        $this->container['storeChainStoreId'] = isset($data['storeChainStoreId']) ? $data['storeChainStoreId'] : null;
        $this->container['deemedResellerCategory'] = isset($data['deemedResellerCategory']) ? $data['deemedResellerCategory'] : null;
        $this->container['buyerInfo'] = isset($data['buyerInfo']) ? $data['buyerInfo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['aSIN'] === null) {
            $invalidProperties[] = "'aSIN' can't be null";
        }
        if ($this->container['orderItemId'] === null) {
            $invalidProperties[] = "'orderItemId' can't be null";
        }
        if ($this->container['quantityOrdered'] === null) {
            $invalidProperties[] = "'quantityOrdered' can't be null";
        }
        $allowedValues = $this->getDeemedResellerCategoryAllowableValues();
        if (!is_null($this->container['deemedResellerCategory']) && !in_array($this->container['deemedResellerCategory'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'deemedResellerCategory', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aSIN
     *
     * @return string
     */
    public function getASIN()
    {
        return $this->container['aSIN'];
    }

    /**
     * Sets aSIN
     *
     * @param string $aSIN The Amazon Standard Identification Number (ASIN) of the item.
     *
     * @return $this
     */
    public function setASIN($aSIN)
    {
        $this->container['aSIN'] = $aSIN;

        return $this;
    }

    /**
     * Gets sellerSKU
     *
     * @return string
     */
    public function getSellerSKU()
    {
        return $this->container['sellerSKU'];
    }

    /**
     * Sets sellerSKU
     *
     * @param string $sellerSKU The seller stock keeping unit (SKU) of the item.
     *
     * @return $this
     */
    public function setSellerSKU($sellerSKU)
    {
        $this->container['sellerSKU'] = $sellerSKU;

        return $this;
    }

    /**
     * Gets orderItemId
     *
     * @return string
     */
    public function getOrderItemId()
    {
        return $this->container['orderItemId'];
    }

    /**
     * Sets orderItemId
     *
     * @param string $orderItemId An Amazon-defined order item identifier.
     *
     * @return $this
     */
    public function setOrderItemId($orderItemId)
    {
        $this->container['orderItemId'] = $orderItemId;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The name of the item.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets quantityOrdered
     *
     * @return int
     */
    public function getQuantityOrdered()
    {
        return $this->container['quantityOrdered'];
    }

    /**
     * Sets quantityOrdered
     *
     * @param int $quantityOrdered The number of items in the order.
     *
     * @return $this
     */
    public function setQuantityOrdered($quantityOrdered)
    {
        $this->container['quantityOrdered'] = $quantityOrdered;

        return $this;
    }

    /**
     * Gets quantityShipped
     *
     * @return int
     */
    public function getQuantityShipped()
    {
        return $this->container['quantityShipped'];
    }

    /**
     * Sets quantityShipped
     *
     * @param int $quantityShipped The number of items shipped.
     *
     * @return $this
     */
    public function setQuantityShipped($quantityShipped)
    {
        $this->container['quantityShipped'] = $quantityShipped;

        return $this;
    }

    /**
     * Gets productInfo
     *
     * @return \B1\AmazonSPAPI\Model\ProductInfoDetail
     */
    public function getProductInfo()
    {
        return $this->container['productInfo'];
    }

    /**
     * Sets productInfo
     *
     * @param \B1\AmazonSPAPI\Model\ProductInfoDetail $productInfo Product information for the item.
     *
     * @return $this
     */
    public function setProductInfo($productInfo)
    {
        $this->container['productInfo'] = $productInfo;

        return $this;
    }

    /**
     * Gets pointsGranted
     *
     * @return \B1\AmazonSPAPI\Model\PointsGrantedDetail
     */
    public function getPointsGranted()
    {
        return $this->container['pointsGranted'];
    }

    /**
     * Sets pointsGranted
     *
     * @param \B1\AmazonSPAPI\Model\PointsGrantedDetail $pointsGranted The number and value of Amazon Points granted with the purchase of an item.
     *
     * @return $this
     */
    public function setPointsGranted($pointsGranted)
    {
        $this->container['pointsGranted'] = $pointsGranted;

        return $this;
    }

    /**
     * Gets itemPrice
     *
     * @return \B1\AmazonSPAPI\Model\Money
     */
    public function getItemPrice()
    {
        return $this->container['itemPrice'];
    }

    /**
     * Sets itemPrice
     *
     * @param \B1\AmazonSPAPI\Model\Money $itemPrice The selling price of the order item. Note that an order item is an item and a quantity. This means that the value of ItemPrice is equal to the selling price of the item multiplied by the quantity ordered. Note that ItemPrice excludes ShippingPrice and GiftWrapPrice.
     *
     * @return $this
     */
    public function setItemPrice($itemPrice)
    {
        $this->container['itemPrice'] = $itemPrice;

        return $this;
    }

    /**
     * Gets shippingPrice
     *
     * @return \B1\AmazonSPAPI\Model\Money
     */
    public function getShippingPrice()
    {
        return $this->container['shippingPrice'];
    }

    /**
     * Sets shippingPrice
     *
     * @param \B1\AmazonSPAPI\Model\Money $shippingPrice The shipping price of the item.
     *
     * @return $this
     */
    public function setShippingPrice($shippingPrice)
    {
        $this->container['shippingPrice'] = $shippingPrice;

        return $this;
    }

    /**
     * Gets itemTax
     *
     * @return \B1\AmazonSPAPI\Model\Money
     */
    public function getItemTax()
    {
        return $this->container['itemTax'];
    }

    /**
     * Sets itemTax
     *
     * @param \B1\AmazonSPAPI\Model\Money $itemTax The tax on the item price.
     *
     * @return $this
     */
    public function setItemTax($itemTax)
    {
        $this->container['itemTax'] = $itemTax;

        return $this;
    }

    /**
     * Gets shippingTax
     *
     * @return \B1\AmazonSPAPI\Model\Money
     */
    public function getShippingTax()
    {
        return $this->container['shippingTax'];
    }

    /**
     * Sets shippingTax
     *
     * @param \B1\AmazonSPAPI\Model\Money $shippingTax The tax on the shipping price.
     *
     * @return $this
     */
    public function setShippingTax($shippingTax)
    {
        $this->container['shippingTax'] = $shippingTax;

        return $this;
    }

    /**
     * Gets shippingDiscount
     *
     * @return \B1\AmazonSPAPI\Model\Money
     */
    public function getShippingDiscount()
    {
        return $this->container['shippingDiscount'];
    }

    /**
     * Sets shippingDiscount
     *
     * @param \B1\AmazonSPAPI\Model\Money $shippingDiscount The discount on the shipping price.
     *
     * @return $this
     */
    public function setShippingDiscount($shippingDiscount)
    {
        $this->container['shippingDiscount'] = $shippingDiscount;

        return $this;
    }

    /**
     * Gets shippingDiscountTax
     *
     * @return \B1\AmazonSPAPI\Model\Money
     */
    public function getShippingDiscountTax()
    {
        return $this->container['shippingDiscountTax'];
    }

    /**
     * Sets shippingDiscountTax
     *
     * @param \B1\AmazonSPAPI\Model\Money $shippingDiscountTax The tax on the discount on the shipping price.
     *
     * @return $this
     */
    public function setShippingDiscountTax($shippingDiscountTax)
    {
        $this->container['shippingDiscountTax'] = $shippingDiscountTax;

        return $this;
    }

    /**
     * Gets promotionDiscount
     *
     * @return \B1\AmazonSPAPI\Model\Money
     */
    public function getPromotionDiscount()
    {
        return $this->container['promotionDiscount'];
    }

    /**
     * Sets promotionDiscount
     *
     * @param \B1\AmazonSPAPI\Model\Money $promotionDiscount The total of all promotional discounts in the offer.
     *
     * @return $this
     */
    public function setPromotionDiscount($promotionDiscount)
    {
        $this->container['promotionDiscount'] = $promotionDiscount;

        return $this;
    }

    /**
     * Gets promotionDiscountTax
     *
     * @return \B1\AmazonSPAPI\Model\Money
     */
    public function getPromotionDiscountTax()
    {
        return $this->container['promotionDiscountTax'];
    }

    /**
     * Sets promotionDiscountTax
     *
     * @param \B1\AmazonSPAPI\Model\Money $promotionDiscountTax The tax on the total of all promotional discounts in the offer.
     *
     * @return $this
     */
    public function setPromotionDiscountTax($promotionDiscountTax)
    {
        $this->container['promotionDiscountTax'] = $promotionDiscountTax;

        return $this;
    }

    /**
     * Gets promotionIds
     *
     * @return \B1\AmazonSPAPI\Model\PromotionIdList
     */
    public function getPromotionIds()
    {
        return $this->container['promotionIds'];
    }

    /**
     * Sets promotionIds
     *
     * @param \B1\AmazonSPAPI\Model\PromotionIdList $promotionIds promotionIds
     *
     * @return $this
     */
    public function setPromotionIds($promotionIds)
    {
        $this->container['promotionIds'] = $promotionIds;

        return $this;
    }

    /**
     * Gets cODFee
     *
     * @return \B1\AmazonSPAPI\Model\Money
     */
    public function getCODFee()
    {
        return $this->container['cODFee'];
    }

    /**
     * Sets cODFee
     *
     * @param \B1\AmazonSPAPI\Model\Money $cODFee The fee charged for COD service.
     *
     * @return $this
     */
    public function setCODFee($cODFee)
    {
        $this->container['cODFee'] = $cODFee;

        return $this;
    }

    /**
     * Gets cODFeeDiscount
     *
     * @return \B1\AmazonSPAPI\Model\Money
     */
    public function getCODFeeDiscount()
    {
        return $this->container['cODFeeDiscount'];
    }

    /**
     * Sets cODFeeDiscount
     *
     * @param \B1\AmazonSPAPI\Model\Money $cODFeeDiscount The discount on the COD fee.
     *
     * @return $this
     */
    public function setCODFeeDiscount($cODFeeDiscount)
    {
        $this->container['cODFeeDiscount'] = $cODFeeDiscount;

        return $this;
    }

    /**
     * Gets isGift
     *
     * @return bool
     */
    public function getIsGift()
    {
        return $this->container['isGift'];
    }

    /**
     * Sets isGift
     *
     * @param bool $isGift When true, the item is a gift.
     *
     * @return $this
     */
    public function setIsGift($isGift)
    {
        $this->container['isGift'] = $isGift;

        return $this;
    }

    /**
     * Gets conditionNote
     *
     * @return string
     */
    public function getConditionNote()
    {
        return $this->container['conditionNote'];
    }

    /**
     * Sets conditionNote
     *
     * @param string $conditionNote The condition of the item as described by the seller.
     *
     * @return $this
     */
    public function setConditionNote($conditionNote)
    {
        $this->container['conditionNote'] = $conditionNote;

        return $this;
    }

    /**
     * Gets conditionId
     *
     * @return string
     */
    public function getConditionId()
    {
        return $this->container['conditionId'];
    }

    /**
     * Sets conditionId
     *
     * @param string $conditionId The condition of the item.  Possible values: New, Used, Collectible, Refurbished, Preorder, Club.
     *
     * @return $this
     */
    public function setConditionId($conditionId)
    {
        $this->container['conditionId'] = $conditionId;

        return $this;
    }

    /**
     * Gets conditionSubtypeId
     *
     * @return string
     */
    public function getConditionSubtypeId()
    {
        return $this->container['conditionSubtypeId'];
    }

    /**
     * Sets conditionSubtypeId
     *
     * @param string $conditionSubtypeId The subcondition of the item.  Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, Any, Other.
     *
     * @return $this
     */
    public function setConditionSubtypeId($conditionSubtypeId)
    {
        $this->container['conditionSubtypeId'] = $conditionSubtypeId;

        return $this;
    }

    /**
     * Gets scheduledDeliveryStartDate
     *
     * @return string
     */
    public function getScheduledDeliveryStartDate()
    {
        return $this->container['scheduledDeliveryStartDate'];
    }

    /**
     * Sets scheduledDeliveryStartDate
     *
     * @param string $scheduledDeliveryStartDate The start date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time format.
     *
     * @return $this
     */
    public function setScheduledDeliveryStartDate($scheduledDeliveryStartDate)
    {
        $this->container['scheduledDeliveryStartDate'] = $scheduledDeliveryStartDate;

        return $this;
    }

    /**
     * Gets scheduledDeliveryEndDate
     *
     * @return string
     */
    public function getScheduledDeliveryEndDate()
    {
        return $this->container['scheduledDeliveryEndDate'];
    }

    /**
     * Sets scheduledDeliveryEndDate
     *
     * @param string $scheduledDeliveryEndDate The end date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time format.
     *
     * @return $this
     */
    public function setScheduledDeliveryEndDate($scheduledDeliveryEndDate)
    {
        $this->container['scheduledDeliveryEndDate'] = $scheduledDeliveryEndDate;

        return $this;
    }

    /**
     * Gets priceDesignation
     *
     * @return string
     */
    public function getPriceDesignation()
    {
        return $this->container['priceDesignation'];
    }

    /**
     * Sets priceDesignation
     *
     * @param string $priceDesignation Indicates that the selling price is a special price that is available only for Amazon Business orders. For more information about the Amazon Business Seller Program, see the [Amazon Business website](https://www.amazon.com/b2b/info/amazon-business).   Possible values: BusinessPrice - A special price that is available only for Amazon Business orders.
     *
     * @return $this
     */
    public function setPriceDesignation($priceDesignation)
    {
        $this->container['priceDesignation'] = $priceDesignation;

        return $this;
    }

    /**
     * Gets taxCollection
     *
     * @return \B1\AmazonSPAPI\Model\TaxCollection
     */
    public function getTaxCollection()
    {
        return $this->container['taxCollection'];
    }

    /**
     * Sets taxCollection
     *
     * @param \B1\AmazonSPAPI\Model\TaxCollection $taxCollection Information about withheld taxes.
     *
     * @return $this
     */
    public function setTaxCollection($taxCollection)
    {
        $this->container['taxCollection'] = $taxCollection;

        return $this;
    }

    /**
     * Gets serialNumberRequired
     *
     * @return bool
     */
    public function getSerialNumberRequired()
    {
        return $this->container['serialNumberRequired'];
    }

    /**
     * Sets serialNumberRequired
     *
     * @param bool $serialNumberRequired When true, the product type for this item has a serial number.  Returned only for Amazon Easy Ship orders.
     *
     * @return $this
     */
    public function setSerialNumberRequired($serialNumberRequired)
    {
        $this->container['serialNumberRequired'] = $serialNumberRequired;

        return $this;
    }

    /**
     * Gets isTransparency
     *
     * @return bool
     */
    public function getIsTransparency()
    {
        return $this->container['isTransparency'];
    }

    /**
     * Sets isTransparency
     *
     * @param bool $isTransparency When true, transparency codes are required.
     *
     * @return $this
     */
    public function setIsTransparency($isTransparency)
    {
        $this->container['isTransparency'] = $isTransparency;

        return $this;
    }

    /**
     * Gets iossNumber
     *
     * @return string
     */
    public function getIossNumber()
    {
        return $this->container['iossNumber'];
    }

    /**
     * Sets iossNumber
     *
     * @param string $iossNumber The IOSS number for the marketplace. Sellers shipping to the European Union (EU) from outside of the EU must provide this IOSS number to their carrier when Amazon has collected the VAT on the sale.
     *
     * @return $this
     */
    public function setIossNumber($iossNumber)
    {
        $this->container['iossNumber'] = $iossNumber;

        return $this;
    }

    /**
     * Gets storeChainStoreId
     *
     * @return string
     */
    public function getStoreChainStoreId()
    {
        return $this->container['storeChainStoreId'];
    }

    /**
     * Sets storeChainStoreId
     *
     * @param string $storeChainStoreId The store chain store identifier. Linked to a specific store in a store chain.
     *
     * @return $this
     */
    public function setStoreChainStoreId($storeChainStoreId)
    {
        $this->container['storeChainStoreId'] = $storeChainStoreId;

        return $this;
    }

    /**
     * Gets deemedResellerCategory
     *
     * @return string
     */
    public function getDeemedResellerCategory()
    {
        return $this->container['deemedResellerCategory'];
    }

    /**
     * Sets deemedResellerCategory
     *
     * @param string $deemedResellerCategory The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK.
     *
     * @return $this
     */
    public function setDeemedResellerCategory($deemedResellerCategory)
    {
        $allowedValues = $this->getDeemedResellerCategoryAllowableValues();
        if (!is_null($deemedResellerCategory) && !in_array($deemedResellerCategory, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'deemedResellerCategory', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deemedResellerCategory'] = $deemedResellerCategory;

        return $this;
    }

    /**
     * Gets buyerInfo
     *
     * @return \B1\AmazonSPAPI\Model\ItemBuyerInfo
     */
    public function getBuyerInfo()
    {
        return $this->container['buyerInfo'];
    }

    /**
     * Sets buyerInfo
     *
     * @param \B1\AmazonSPAPI\Model\ItemBuyerInfo $buyerInfo buyerInfo
     *
     * @return $this
     */
    public function setBuyerInfo($buyerInfo)
    {
        $this->container['buyerInfo'] = $buyerInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


